#!/usr/bin/python

# To solve this problem, make the './run' executable handle any
# appropriate command line arguments and stdin and output the
# solution to stdout.
import collections
width, height, num = map(int, raw_input().split())

FACE_COORDS = [(0, 1, 2, 9, 10, 11, 18, 19, 20), (0, 3, 6, 1, 4, 7, 2, 5, 8), (0, 9, 18, 3, 12, 21, 6, 15, 24), (2, 1, 0, 5, 4, 3, 8, 7, 6), (2, 5, 8, 11, 14, 17, 20, 23, 26), (2, 11, 20, 1, 10, 19, 0, 9, 18), (6, 3, 0, 15, 12, 9, 24, 21, 18), (6, 7, 8, 3, 4, 5, 0, 1, 2), (6, 15, 24, 7, 16, 25, 8, 17, 26), (8, 5, 2, 7, 4, 1, 6, 3, 0), (8, 7, 6, 17, 16, 15, 26, 25, 24), (8, 17, 26, 5, 14, 23, 2, 11, 20), (18, 9, 0, 19, 10, 1, 20, 11, 2), (18, 19, 20, 21, 22, 23, 24, 25, 26), (18, 21, 24, 9, 12, 15, 0, 3, 6), (20, 11, 2, 23, 14, 5, 26, 17, 8), (20, 19, 18, 11, 10, 9, 2, 1, 0), (20, 23, 26, 19, 22, 25, 18, 21, 24), (24, 15, 6, 21, 12, 3, 18, 9, 0), (24, 21, 18, 25, 22, 19, 26, 23, 20), (24, 25, 26, 15, 16, 17, 6, 7, 8), (26, 17, 8, 25, 16, 7, 24, 15, 6), (26, 23, 20, 17, 14, 11, 8, 5, 2), (26, 25, 24, 23, 22, 21, 20, 19, 18)]


raw_input()
mosaic = [raw_input() for _ in range(height*3)]

exposed = collections.Counter()
for y in range(height):
    for x in range(width):
        face = ''.join(mosaic[r][x*3:x*3+3] for r in range(y*3, y*3+3))
        exposed[face] += 1


for _ in range(num):
    raw_input()
    description = ''.join(raw_input().replace(' ','') for _ in range(3))

    faces = set()
    for coords in FACE_COORDS:
        face = ''.join(description[ind] for ind in coords)
        faces.add(face)
    assert 1 <= len(faces) <= 24

    print sum(exposed[face] for face in faces)










